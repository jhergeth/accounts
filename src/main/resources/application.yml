micronaut:
  application:
    name: accounts

  server:
    port: 80
    max-request-size: 104857600
    cors:
      enabled: true
    multipart:
      max-file-size: 268435456
    ssl:
      enabled: 'false'
    netty:
      worker:
        threads: 8
      childOptions:
        autoRead: true

  executors:
    io:
      type: fixed
      nThreads: 75

  router:
    static-resources:
      public:
        enabled: true
        mapping: /**
        paths: classpath:public

  security:
    enabled: true
    ldap:
      default:
        enabled: true
        context:
          server: 'ldaps://ldap.kc.bkgk.de'
          managerDn: 'cn=admin,dc=bkest,dc=schule'
          managerPassword: 'pHtSL4MhUlaTBaevsmka'
        search:
          base: "ou=Lehrer,dc=bkest,dc=schule"
          filter: "cn={0}"
        groups:
          enabled: true
          filter: "member={0}"
          base: "ou=System,dc=bkest,dc=schule"

    authentication: bearer
    token:
      jwt:
        generator:
          refresh-token:
            secret: '"${JWT_GENERATOR_SIGNATURE_SECRET:pleaseChangeThisSecretForANewOne}"'

    endpoints:
      login:
        enabled: true
        path: '/auth/login'
      logout:
        enabled: true
        path: '/auth/logout'
        get-allowed: true

    intercept-url-map:
      - pattern: /auth/**
        access:
          - isAnonymous()
      - pattern: /api/acc/write/newpasswort
        http-method: POST
        access:
          - ROLE_TEACHER
      - pattern: /api/konfig/**
        http-method: GET
        access:
          - ROLE_ADMIN
      - pattern: /api/konfig/**
        http-method: POST
        access:
          - ROLE_ADMIN
      - pattern: /api/acc/write/**
        http-method: GET
        access:
          - ROLE_ACCOUNTMANAGER
      - pattern: /api/acc/write/**
        http-method: POST
        access:
          - ROLE_ACCOUNTMANAGER
      - pattern: /api/acc/read/**
        http-method: GET
        access:
          - isAuthenticated()
      - pattern: /api/acc/read/**
        http-method: POST
        access:
          - isAuthenticated()
      - pattern: /api/eplan/bereiche
        http-method: GET
        access:
          - isAuthenticated()
      - pattern: /api/eplan/**
        http-method: POST
        access:
          - isAuthenticated()
      - pattern: /**
        http-method: GET
        access:
          - isAnonymous()

datasources:
  default:
    url: jdbc:mariadb://localhost:3306/eplan
    driverClassName: org.mariadb.jdbc.Driver
    username: root
    password: '1aachen9'
    schema-generate: CREATE
    dialect: MYSQL


#  remote:
#    url: jdbc:mariadb://ds718:3306/bkestctrl
#    driverClassName: org.mariadb.jdbc.Driver
#    username: root
#    password: '1aachen9'
#    schema-generate: CREATE
#    dialect: MYSQL

#  notused:
#    url: jdbc:postgresql://192.168.178.250:5433/eplan
#    driverClassName: org.postgresql.Driver
#    username: eplan
#    password: '1Geilenkirchen-'
#    schema-generate: none
#    dialect: POSTGRES

liquibase:
  datasources:
    default:
      change-log: 'classpath:db/liquibase-changelog.xml'

#  h2:
#    url: jdbc:h2:mem:devDb;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false
#    driverClassName: org.h2.Driver
#    username: sa
#    password: ''
#    schema-generate: CREATE_DROP
#    dialect: H2

#jpa:
#  default:
#    entity-scan:
#      packages: 'name.hergeth.eplan.domain'
#    properties:
#      hibernate:
#        hbm2ddl:
#          auto: update
#        show_sql: true


logger:
  levels:
    'name.hergeth': DEBUG
    'org.codehaus.jackson': DEBUG
    'io.micronaut': INFO
    'io.micronaut.data.query': ERROR
#    'io.micronaut.security': DEBUG
#    'io.micronaut.configuration.security.ldap': DEBUG

accounts:
  configpfad: 'config/accounts.json'

eplan:
  bereiche: ["BauH", "ETIT", "JVA", "AV", "AIF", "FOS", "ErnPfl", "SozKi", "GesSoz"]
