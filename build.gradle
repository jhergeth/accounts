plugins {
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.8"
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

scmVersion {
    repository {
        remote = 'master'
    }
}

project.version = scmVersion.version
group = "name.hergeth"

micronaut {
    version "3.1.4"
}
repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("name.hergeth.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation platform('io.projectreactor:reactor-bom:2020.0.11')
    implementation 'io.projectreactor:reactor-core'
    implementation 'io.micronaut.reactor:micronaut-reactor:2.0.0'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client:2.0.0'
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-ldap")
    implementation("javax.annotation:javax.annotation-api")
// https://mvnrepository.com/artifact/javax.mail/javax.mail-api
    implementation 'javax.mail:javax.mail-api:1.6.2'

    implementation("org.apache.logging.log4j:log4j-core:2.14.1")

    // https://mvnrepository.com/artifact/info.debatty/java-string-similarity
    implementation 'info.debatty:java-string-similarity:2.0.0'

// google: guava, gson
//    implementation("com.google.guava:guava")
    implementation 'com.google.code.gson:gson:2.8.8'

// https://mvnrepository.com/artifact/org.apache.directory.api/api-all
    implementation group: 'org.apache.directory.api', name: 'api-all', version: '2.1.0'
// https://mvnrepository.com/artifact/org.wso2.orbit.org.apache.commons/commons-compress
    implementation 'org.wso2.orbit.org.apache.commons:commons-compress:1.18.0.wso2v1'
    // Apache commons
    compileOnly "org.apache.commons:commons-email:1.5"
    compileOnly "commons-validator:commons-validator:1.7"
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
// https://mvnrepository.com/artifact/commons-io/commons-io
//    implementation 'commons-io:commons-io:20030203.000550'
    compileOnly 'commons-io:commons-io:2.11.0'

    // https://mvnrepository.com/artifact/com.github.lookfirst/sardine
    implementation group: 'com.github.lookfirst', name: 'sardine', version: '5.10'

    // jackson and xml
    implementation("io.micronaut.xml:micronaut-jackson-xml")

    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")


/*
    annotationProcessor "io.micronaut:micronaut-inject-java"
    compile "io.micronaut.configuration:micronaut-security-ldap"
    implementation("io.micronaut.security:micronaut-security-annotations")

    // reactor
    implementation platform('io.projectreactor:reactor-bom:2020.0.11')
    implementation 'io.projectreactor:reactor-core'
    implementation 'io.micronaut.reactor:micronaut-reactor:2.0.0'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client:2.0.0'

    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")

    implementation("javax.annotation:javax.annotation-api")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.14.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.14.1")
    implementation("io.micronaut:micronaut-validation")
*/
}


application {
    mainClass.set("name.hergeth.Application")
}

dockerBuild {
    images = [
            "jhergeth/${System.env.DOCKER_IMAGE ?: project.name}:$project.version",
            "jhergeth/${System.env.DOCKER_IMAGE ?: project.name}:latest"
    ]
}
// https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/214
task fixIssue214(type: Copy){
    from "Dockerfile"
    into "${buildDir}/docker"
}
dockerBuild.dockerFile.set(file("${buildDir}/docker/Dockerfile"))
// ^^^
dockerBuild.dependsOn fixIssue214 // wire the generateJava task into the DAG

task fetchUI(type: Copy){
    from "C:\\USR\\DEV\\accvue\\dist"
    into 'src/main/resources/public'
}


java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}


shadowJar {
    mergeServiceFiles()
}


// generate a small Java class holding the current version from gradle.properties
task genJavaVer(type:Copy) {
    group = 'Generate Java Source'
    description = 'Generates the java source to display the version in the application.'

    def javaSrcContext = [version: project.version]
    inputs.properties javaSrcContext // for gradle up-to-date check
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand javaSrcContext
}
sourceSets.main.java.srcDir "$buildDir/generated/java" // add the extra source dir
compileJava.dependsOn genJavaVer // wire the generateJava task into the DAG


