plugins {
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "2.0.8"
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

scmVersion {
    repository {
        remote = 'master'
    }
}

project.version = scmVersion.version
group = "name.hergeth"

application {
    mainClass.set("name.hergeth.Application")
}

micronaut {
    version "3.2.0"
}
repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("name.hergeth.*")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    compileOnly("org.projectlombok:lombok")
//    compileOnly("jakarta.persistence:jakarta.persistence-api")
    compileOnly("jakarta.persistence:jakarta.persistence-api:2.2.2")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
//    implementation platform('io.projectreactor:reactor-bom:2020.0.13')
//    implementation 'io.projectreactor:reactor-core'
    implementation 'io.micronaut.reactor:micronaut-reactor'
    implementation 'io.micronaut.reactor:micronaut-reactor-http-client'

    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-ldap")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-jdbc")
//    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")


    implementation("javax.annotation:javax.annotation-api")

// https://mvnrepository.com/artifact/javax.mail/javax.mail-api
    implementation 'javax.mail:javax.mail-api:1.6.2'

    implementation("org.apache.logging.log4j:log4j-core:2.14.1")

    // https://mvnrepository.com/artifact/info.debatty/java-string-similarity
    implementation 'info.debatty:java-string-similarity:2.0.0'

// google: guava, gson
//    implementation("com.google.guava:guava")
    implementation 'com.google.code.gson:gson:2.8.8'

    implementation 'com.googlecode.ez-vcard:ez-vcard:0.11.3'
    // https://mvnrepository.com/artifact/com.googlecode.libphonenumber/libphonenumber
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.38'

// https://mvnrepository.com/artifact/org.apache.directory.api/api-all
    implementation group: 'org.apache.directory.api', name: 'api-all', version: '2.1.0'
// https://mvnrepository.com/artifact/org.wso2.orbit.org.apache.commons/commons-compress
    implementation 'org.wso2.orbit.org.apache.commons:commons-compress:1.18.0.wso2v1'
    // Apache commons
    implementation "org.apache.commons:commons-email:1.5"
    implementation "commons-validator:commons-validator:1.7"
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

// https://mvnrepository.com/artifact/commons-io/commons-io
//    implementation 'commons-io:commons-io:20030203.000550'
    implementation 'commons-io:commons-io:2.11.0'
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.0.0'

    // https://github.com/xdrop/fuzzywuzzy
    implementation 'me.xdrop:fuzzywuzzy:1.3.1'

// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.12.3'

    // https://mvnrepository.com/artifact/com.github.lookfirst/sardine
    implementation group: 'com.github.lookfirst', name: 'sardine', version: '5.10'

    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
//    runtimeOnly("com.h2database:h2")
    // https://mvnrepository.com/artifact/com.h2database/h2
    runtimeOnly("io.micronaut.sql:micronaut-jdbc-hikari")

    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    // jackson and xml
    implementation("io.micronaut.xml:micronaut-jackson-xml")
}


dockerBuild {
    images = [
            "jhergeth/${System.env.DOCKER_IMAGE ?: project.name}:$project.version",
            "jhergeth/${System.env.DOCKER_IMAGE ?: project.name}:latest"
    ]
}
// https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/214
task fixIssue214(type: Copy){
    from "Dockerfile"
    into "${buildDir}/docker"
}
dockerBuild.dockerFile.set(file("${buildDir}/docker/Dockerfile"))
// ^^^
dockerBuild.dependsOn fixIssue214 // wire the generateJava task into the DAG

task fetchUI(type: Copy){
    from "C:\\USR\\DEV\\accvue\\dist"
    into 'src/main/resources/public'
}


java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}


shadowJar {
    mergeServiceFiles()
}


// generate a small Java class holding the current version from gradle.properties
task genJavaVer(type:Copy) {
    group = 'Generate Java Source'
    description = 'Generates the java source to display the version in the application.'

    def javaSrcContext = [version: project.version]
    inputs.properties javaSrcContext // for gradle up-to-date check
    from 'src/template/java'
    into "$buildDir/generated/java"
    expand javaSrcContext
}
sourceSets.main.java.srcDir "$buildDir/generated/java" // add the extra source dir
compileJava.dependsOn genJavaVer // wire the generateJava task into the DAG